INFO     HTTP_LOGGER:event_hooks.py:26 Make POST request to  http://localhost:8000/api/v1/users
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/users
INFO     HTTP_LOGGER:event_hooks.py:26 Make POST request to  http://localhost:8000/api/v1/authentication/login
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/authentication/login
INFO     HTTP_LOGGER:event_hooks.py:26 Make POST request to  http://localhost:8000/api/v1/files
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/files
INFO     HTTP_LOGGER:event_hooks.py:26 Make POST request to  http://localhost:8000/api/v1/courses
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/courses
INFO     HTTP_LOGGER:event_hooks.py:26 Make GET request to  http://localhost:8000/api/v1/courses?userId=8b74f722-aa7d-4395-8a19-37f6f1ce2e08
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/courses?userId=8b74f722-aa7d-4395-8a19-37f6f1ce2e08
INFO     BASE_ASSERTIONS:base.py:10 Check that response status code equal 200
INFO     COURSE_ASSERTIONS:course.py:53 Check get course response
INFO     BASE_ASSERTIONS:base.py:44 Check that 'courses' length equals to [CreateCourseResponseSchema(course=CourseSchema(id='690d92ca-8ba0-4f18-abd2-39d9be619222', title='Славный основание совещание рот штаб пространство мягкий.', max_score=50, min_score=41, description='Славный головка редактор банк редактор. Находить смеяться выраженный поздравлять коммунизм. Легко заявление салон собеседник граница еврейский инвалид.', estimated_time='3 weeks', preview_file=FileSchema(id='8e8f7705-f01b-45a9-9ae0-79db5892e619', url=HttpUrl('http://localhost:8000/static/tests/22038546-e303-4df5-a062-7cde5b99a0a9.png'), filename='22038546-e303-4df5-a062-7cde5b99a0a9.png', directory='tests'), created_by_user=UserSchema(id='8b74f722-aa7d-4395-8a19-37f6f1ce2e08', email='apollinari2022@example.net', first_name='Милан', last_name='Зайцева', middle_name='Парфен')))]
INFO     COURSE_ASSERTIONS:course.py:40 Check course
INFO     BASE_ASSERTIONS:base.py:19 Check that 'id' equals to 690d92ca-8ba0-4f18-abd2-39d9be619222
INFO     BASE_ASSERTIONS:base.py:19 Check that 'title' equals to Славный основание совещание рот штаб пространство мягкий.
INFO     BASE_ASSERTIONS:base.py:19 Check that 'max_score' equals to 50
INFO     BASE_ASSERTIONS:base.py:19 Check that 'min_score' equals to 41
INFO     BASE_ASSERTIONS:base.py:19 Check that 'description' equals to Славный головка редактор банк редактор. Находить смеяться выраженный поздравлять коммунизм. Легко заявление салон собеседник граница еврейский инвалид.
INFO     BASE_ASSERTIONS:base.py:19 Check that 'estimated_time' equals to 3 weeks
INFO     FILE_ASSERTIONS:files.py:29 Check file
INFO     BASE_ASSERTIONS:base.py:19 Check that 'id' equals to 8e8f7705-f01b-45a9-9ae0-79db5892e619
INFO     BASE_ASSERTIONS:base.py:19 Check that 'url' equals to http://localhost:8000/static/tests/22038546-e303-4df5-a062-7cde5b99a0a9.png
INFO     BASE_ASSERTIONS:base.py:19 Check that 'filename' equals to 22038546-e303-4df5-a062-7cde5b99a0a9.png
INFO     BASE_ASSERTIONS:base.py:19 Check that 'directory' equals to tests
INFO     USER_ASSERTIONS:users.py:19 Check user
INFO     BASE_ASSERTIONS:base.py:19 Check that 'id' equals to 8b74f722-aa7d-4395-8a19-37f6f1ce2e08
INFO     BASE_ASSERTIONS:base.py:19 Check that 'email' equals to apollinari2022@example.net
INFO     BASE_ASSERTIONS:base.py:19 Check that 'first_name' equals to Милан
INFO     BASE_ASSERTIONS:base.py:19 Check that 'last_name' equals to Зайцева
INFO     BASE_ASSERTIONS:base.py:19 Check that 'middle_name' equals to Парфен
INFO     SCHEMA_ASSERTIONS:schema.py:19 Validating json schema