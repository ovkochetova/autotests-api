INFO     HTTP_LOGGER:event_hooks.py:26 Make POST request to  http://localhost:8000/api/v1/users
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/users
INFO     HTTP_LOGGER:event_hooks.py:26 Make POST request to  http://localhost:8000/api/v1/authentication/login
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/authentication/login
INFO     HTTP_LOGGER:event_hooks.py:26 Make POST request to  http://localhost:8000/api/v1/files
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/files
INFO     HTTP_LOGGER:event_hooks.py:26 Make POST request to  http://localhost:8000/api/v1/courses
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/courses
INFO     HTTP_LOGGER:event_hooks.py:26 Make GET request to  http://localhost:8000/api/v1/courses?userId=2eed1664-efec-453c-a6c3-b6d32bd97f56
INFO     HTTP_LOGGER:event_hooks.py:34 GOT 200 response to  OK from http://localhost:8000/api/v1/courses?userId=2eed1664-efec-453c-a6c3-b6d32bd97f56
INFO     BASE_ASSERTIONS:base.py:10 Check that response status code equal 200
INFO     COURSE_ASSERTIONS:course.py:53 Check get course response
INFO     BASE_ASSERTIONS:base.py:44 Check that 'courses' length equals to [CreateCourseResponseSchema(course=CourseSchema(id='5c6fbc93-9acf-4846-b2bc-9c841bc9acd0', title='Волк при степь терапия печатать поставить что.', max_score=68, min_score=12, description='Деловой князь один господь пробовать смеяться соответствие. Прежний отъезд лиловый иной экзамен. Князь командующий мучительно четко собеседник кпсс вперед.', estimated_time='9 weeks', preview_file=FileSchema(id='50681a9c-2538-4b6d-ae1a-7aac035e8108', url=HttpUrl('http://localhost:8000/static/tests/d2d7677e-69c1-4244-bbf3-ceebb9827ab5.png'), filename='d2d7677e-69c1-4244-bbf3-ceebb9827ab5.png', directory='tests'), created_by_user=UserSchema(id='2eed1664-efec-453c-a6c3-b6d32bd97f56', email='ikirillova@example.net', first_name='Аверьян', last_name='Кудряшова', middle_name='Зоя')))]
INFO     COURSE_ASSERTIONS:course.py:40 Check course
INFO     BASE_ASSERTIONS:base.py:19 Check that 'id' equals to 5c6fbc93-9acf-4846-b2bc-9c841bc9acd0
INFO     BASE_ASSERTIONS:base.py:19 Check that 'title' equals to Волк при степь терапия печатать поставить что.
INFO     BASE_ASSERTIONS:base.py:19 Check that 'max_score' equals to 68
INFO     BASE_ASSERTIONS:base.py:19 Check that 'min_score' equals to 12
INFO     BASE_ASSERTIONS:base.py:19 Check that 'description' equals to Деловой князь один господь пробовать смеяться соответствие. Прежний отъезд лиловый иной экзамен. Князь командующий мучительно четко собеседник кпсс вперед.
INFO     BASE_ASSERTIONS:base.py:19 Check that 'estimated_time' equals to 9 weeks
INFO     FILE_ASSERTIONS:files.py:29 Check file
INFO     BASE_ASSERTIONS:base.py:19 Check that 'id' equals to 50681a9c-2538-4b6d-ae1a-7aac035e8108
INFO     BASE_ASSERTIONS:base.py:19 Check that 'url' equals to http://localhost:8000/static/tests/d2d7677e-69c1-4244-bbf3-ceebb9827ab5.png
INFO     BASE_ASSERTIONS:base.py:19 Check that 'filename' equals to d2d7677e-69c1-4244-bbf3-ceebb9827ab5.png
INFO     BASE_ASSERTIONS:base.py:19 Check that 'directory' equals to tests
INFO     USER_ASSERTIONS:users.py:19 Check user
INFO     BASE_ASSERTIONS:base.py:19 Check that 'id' equals to 2eed1664-efec-453c-a6c3-b6d32bd97f56
INFO     BASE_ASSERTIONS:base.py:19 Check that 'email' equals to ikirillova@example.net
INFO     BASE_ASSERTIONS:base.py:19 Check that 'first_name' equals to Аверьян
INFO     BASE_ASSERTIONS:base.py:19 Check that 'last_name' equals to Кудряшова
INFO     BASE_ASSERTIONS:base.py:19 Check that 'middle_name' equals to Зоя
INFO     SCHEMA_ASSERTIONS:schema.py:19 Validating json schema